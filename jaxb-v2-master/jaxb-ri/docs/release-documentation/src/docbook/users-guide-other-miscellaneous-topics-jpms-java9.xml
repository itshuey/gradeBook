<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2012-2017 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0"
         xml:id="running-on-java-9"
         xml:lang="en" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Running on Java 9</title>

    <para>In Java Platform Module System (JPMS) coming with Java SE 9, both rt.jar and endorsed mechanism were removed.
        JAXB technology now comes in <literal>java.xml.bind</literal> and <literal>jdk.xml.bind</literal> JPMS modules.
    </para>
    <para>Bundled version in Java SE can be used by adding java.xml.bind / jdk.xml bind to module graph,
    e.g. depending on those modules if application is loaded as JPMS module, or adding them with command line
        --add-modules java.xml.bind,jdk.xml.bind</para>

    <para>In order to use standalone version of JAXB, java.xml.bind should be upgraded with <literal>jaxb-api</literal>
        module. Implementation jars jaxb-core and jaxb-impl are not modularized yet and should be placed on classpath
        to be run as <literal>unnamed</literal> module.</para>

    <example>
        <title>Using standalone JAXB from classpath as <literal>unnamed</literal> module.
        This example assumes java.xml.bind bundled in Java SE 9 is not resolved in module graph. Module java.activation
        is added to module graph here, it is used by jaxb implementation.</title>
        <programlisting language="cli">
            java -cp jaxb-api.jar:jaxb-impl.jar:jaxb-core.jar --add-modules java.activation
        </programlisting>
    </example>
    <example>
        <title>Using standalone JAXB with java.xml.bind module upgraded.
        Module java.xml.bind is upgraded with jaxb-api, implementation is still loaded from classpath.</title>
        <programlisting language="cli">
            --upgrade-module-path jaxb-api.jar -cp jaxb-core.jar:jaxb-impl.jar
        </programlisting>
        <programlisting language="cli">
            --upgrade-module-path jaxb-api.jar -cp jaxb-core.jar:jaxb-impl.jar
        </programlisting>
    </example>

    <para>
        Known issue:
        If client module is loaded as JPMS named module, than also one of the options must be included:
        <literal>--add-reads foo.mymodule=ALL-UNNAMED</literal> or
        <literal>-Dcom.sun.xml.bind.v2.bytecode.ClassTailor.noOptimize=true</literal>
        This is because JAXB implementation updates client Pojo properties at runtime to extend
        <literal>com.sun.xml.bind.v2.runtime.reflect.Accessor</literal>
        Supposed to be fixed in future updates.
    </para>

    <para>
        Known issue:
        Implementation and tool jars jaxb-core, jaxb-impl, jaxb-xjc and jaxb-jxc contain split packages and cannot
        be used as JPMS automatic modules.
        Supposed to be fixed in future updates.
    </para>


</section>
